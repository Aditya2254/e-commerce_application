# Application Configuration
# Sets the name of the application, used for service discovery and logging
spring.application.name=user-service
# Sets the port on which the application will run
server.port=8110

logging.level.root=info


# Spring Cloud Config Server Configuration
# Imports configuration from a central config server (optional)
# This allows for centralized configuration management in a microservice architecture
spring.config.import=optional:configserver:http://localhost:8888

# Eureka Service Registry Configuration
# URL of the Eureka server where this service will register itself
# This enables service discovery in a microservice architecture
eureka.client.service-url.defaultZone=http://localhost:8761/eureka

# Database Configuration
# JDBC URL for connecting to the MySQL database
spring.datasource.url=jdbc:mysql://localhost:3306/my_db
# Database username
#spring.datasource.username= **stored securely**
# Database password
#spring.datasource.password= **stored securely**

# Hibernate Settings
# Automatically updates the database schema based on entity classes
# Options: none, validate, update, create, create-drop
spring.jpa.hibernate.ddl-auto=update
# Specifies the SQL dialect to use for the database
# This helps Hibernate generate optimized SQL for the specific database
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect

# Optional: Show SQL queries (for debugging)
# When true, Hibernate will log all SQL statements to the console
spring.jpa.show-sql=true

# JWT Configuration
# Secret key used to sign JWT tokens
# This should be a strong, random value in a production environment
# and should be stored securely (e.g., environment variable, vault)
#jwt.secret= **stored securely**
# Access token expiration time in milliseconds
jwt.expiration=900000
# 15 minutes in milliseconds (15 * 60 * 1000)
# Refresh token expiration time in milliseconds
jwt.refresh-expiration=86400000
# 24 hours in milliseconds (24 * 60 * 60 * 1000)
